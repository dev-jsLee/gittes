git이란
파일의 버전을 관리하기 위한 프로그램을 지칭하며
이전에 다른 방식으로 파일의 버전을 관리하는 시스템이 있었으며(형상관리 시스템)
그 이름은 SVN이었다.
최근에 와서는 git이 가장 자주 쓰이는 형상관리툴이 되었다.

=======================
깃 명령어
- 저장소 초기화 명령어
git init
: 폴더를 저장소로 만드는 명령어이다.
파일이나 폴더가 있는지 여부와 무관하게 실행할 수 있는 코드이다.
해당 폴더에 .git폴더가 없는 경우에만 사용할 수 있다.


저장소를 초기화한 뒤, 저장소를 조작하는 사람에 대한 설정을 해야 한다.

git config --local user.name "남에게 보여줄 이름"
git config --local user.email "내 이메일 주소(연락처)"

config: 현재 저장소에 대한 설정을 하겠다는 의미
--local: 현재 저장소에 대해서만 해당 설정을 적용하겠다는 의미
--global: 개인 PC를 사용할 경우, 각 저장소마다 매번 설정하기 귀찮을 수 있다. 이때 global로 설정을 하면 매번 입력할 필요가 없어진다.
user.name: 파일 버전을 관리할 때, 버전을 확정하는 주체가 누구인지 그 명칭을 가리키는 옵션이다.
한글x, 특문x, 공백문자x, 영문자와 숫자만 가능하다
user.email: 저장소에 접근하여 조작하는 사용자의 이메일을 설정하는 옵션
-> 깃허브에 등록된 이메일과 동일하게 설정하면, 깃허브에서 연동을 해준다.

현재 저장소의 상태 확인 명령어
git status
: 현재 저장소의 파일 중 변경사항이 생긴 파일이 있는지 검사
변경사항이 있거나 버전확정할 내용을 정했다면 표시가 뜬다.

1. git add [file경로]
2. git add .

1: 특정 파일을 버전 확정의 대상으로 삼는다(staging)
2: 변경된 모든 파일을 버전 확정의 대상으로 삼는다

=====staging=====
버전 확정을 위한 단계
1. git add : 버전에 포함시킬 대상을 추가하는 것
2. git commit -m "": 버전을 확정하면서 메시지를 남기는 것
3. git push: 원격 저장소로 백업

버전을 확정 및 메시지 남기기

git commit -m "해당 버전에 대한 설명 남기기"
-m: 메시지를 남길 것을 알리는 옵션
"": 해당 버전에 대한 간단한 설명을 남기는 공간
반드시 큰 따옴표 사이에 내용을 작성해야 하며
한글 입력도 가능하다.

 































